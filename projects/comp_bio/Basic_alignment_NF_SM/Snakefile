"""
Genomic Alignment Pipeline using Snakemake
This pipeline performs quality control, alignment, and variant calling on genomic data
"""

# Configuration
configfile: "config.yaml"

# Wildcard constraints
wildcard_constraints:
    sample = "[^/]+"

# Get sample names from the config file
SAMPLES = config["samples"]

# Get reference genome from the config file
REFERENCE = config["reference"]["genome"]

# Final output rule that collects all results
rule all:
    input:
        # FastQC reports
        expand("results/fastqc/{sample}_R1_fastqc.html", sample=SAMPLES),
        expand("results/fastqc/{sample}_R2_fastqc.html", sample=SAMPLES),
        # Trimmed reads
        expand("results/trimmed/{sample}_R1.trimmed.fastq.gz", sample=SAMPLES),
        expand("results/trimmed/{sample}_R2.trimmed.fastq.gz", sample=SAMPLES),
        # Aligned BAM files
        expand("results/aligned/{sample}.sorted.bam", sample=SAMPLES),
        expand("results/aligned/{sample}.sorted.bam.bai", sample=SAMPLES),
        # Deduplicated BAM files
        expand("results/dedup/{sample}.dedup.bam", sample=SAMPLES),
        # Variant calling results
        expand("results/variants/{sample}.vcf.gz", sample=SAMPLES),
        # Filtered variants
        expand("results/filtered/{sample}.filtered.vcf.gz", sample=SAMPLES),
        # MultiQC report
        "results/qc/multiqc_report.html"

# Rule to run FastQC on raw reads
rule fastqc:
    input:
        r1 = lambda wildcards: config["samples"][wildcards.sample]["R1"],
        r2 = lambda wildcards: config["samples"][wildcards.sample]["R2"]
    output:
        html_r1 = "results/fastqc/{sample}_R1_fastqc.html",
        html_r2 = "results/fastqc/{sample}_R2_fastqc.html",
        zip_r1 = "results/fastqc/{sample}_R1_fastqc.zip",
        zip_r2 = "results/fastqc/{sample}_R2_fastqc.zip"
    log:
        "logs/fastqc/{sample}.log"
    params:
        outdir = "results/fastqc"
    threads: config["threads"]["fastqc"]
    shell:
        """
        mkdir -p {params.outdir}
        fastqc -o {params.outdir} -t {threads} {input.r1} {input.r2} > {log} 2>&1
        """

# Rule to trim raw reads with Trimmomatic
rule trimmomatic:
    input:
        r1 = lambda wildcards: config["samples"][wildcards.sample]["R1"],
        r2 = lambda wildcards: config["samples"][wildcards.sample]["R2"],
        adapter = config["params"]["trimmomatic"]["adapter"]
    output:
        r1 = "results/trimmed/{sample}_R1.trimmed.fastq.gz",
        r2 = "results/trimmed/{sample}_R2.trimmed.fastq.gz",
        r1_unpaired = "results/trimmed/{sample}_R1.unpaired.fastq.gz",
        r2_unpaired = "results/trimmed/{sample}_R2.unpaired.fastq.gz"
    log:
        "logs/trimmomatic/{sample}.log"
    params:
        trimmer = config["params"]["trimmomatic"]["trimmer"]
    threads: config["threads"]["trimmomatic"]
    shell:
        """
        trimmomatic PE -threads {threads} \
            {input.r1} {input.r2} \
            {output.r1} {output.r1_unpaired} \
            {output.r2} {output.r2_unpaired} \
            ILLUMINACLIP:{input.adapter}:2:30:10 \
            {params.trimmer} \
            2> {log}
        """

# Rule to index the reference genome for BWA
rule bwa_index:
    input:
        ref = REFERENCE
    output:
        idx = multiext(REFERENCE, ".amb", ".ann", ".bwt", ".pac", ".sa")
    log:
        "logs/bwa_index/reference.log"
    shell:
        """
        bwa index {input.ref} 2> {log}
        """

# Rule to align reads to the reference genome with BWA-MEM
rule bwa_mem:
    input:
        r1 = "results/trimmed/{sample}_R1.trimmed.fastq.gz",
        r2 = "results/trimmed/{sample}_R2.trimmed.fastq.gz",
        ref = REFERENCE,
        idx = multiext(REFERENCE, ".amb", ".ann", ".bwt", ".pac", ".sa")
    output:
        bam = temp("results/aligned/{sample}.bam")
    log:
        "logs/bwa_mem/{sample}.log"
    params:
        rg = r"@RG\tID:{sample}\tSM:{sample}\tPL:ILLUMINA"
    threads: config["threads"]["bwa"]
    shell:
        """
        bwa mem -M -R '{params.rg}' -t {threads} {input.ref} {input.r1} {input.r2} 2> {log} | \
        samtools view -Sb - > {output.bam}
        """

# Rule to sort BAM file
rule samtools_sort:
    input:
        "results/aligned/{sample}.bam"
    output:
        "results/aligned/{sample}.sorted.bam"
    log:
        "logs/samtools_sort/{sample}.log"
    threads: config["threads"]["samtools"]
    shell:
        """
        samtools sort -@ {threads} -o {output} {input} 2> {log}
        """

# Rule to index BAM file
rule samtools_index:
    input:
        "results/aligned/{sample}.sorted.bam"
    output:
        "results/aligned/{sample}.sorted.bam.bai"
    log:
        "logs/samtools_index/{sample}.log"
    shell:
        """
        samtools index {input} {output} 2> {log}
        """

# Rule to mark duplicates with Picard
rule mark_duplicates:
    input:
        "results/aligned/{sample}.sorted.bam"
    output:
        bam = "results/dedup/{sample}.dedup.bam",
        metrics = "results/dedup/{sample}.metrics.txt"
    log:
        "logs/mark_duplicates/{sample}.log"
    params:
        java_opts = "-Xmx4g"
    shell:
        """
        picard {params.java_opts} MarkDuplicates \
            INPUT={input} \
            OUTPUT={output.bam} \
            METRICS_FILE={output.metrics} \
            CREATE_INDEX=true \
            VALIDATION_STRINGENCY=LENIENT \
            2> {log}
        """

# Rule to call variants with GATK HaplotypeCaller
rule call_variants:
    input:
        bam = "results/dedup/{sample}.dedup.bam",
        ref = REFERENCE,
        ref_dict = f"{os.path.splitext(REFERENCE)[0]}.dict",
        ref_fai = f"{REFERENCE}.fai"
    output:
        vcf = "results/variants/{sample}.vcf.gz",
        idx = "results/variants/{sample}.vcf.gz.tbi"
    log:
        "logs/call_variants/{sample}.log"
    params:
        java_opts = "-Xmx4g"
    shell:
        """
        gatk --java-options "{params.java_opts}" HaplotypeCaller \
            -R {input.ref} \
            -I {input.bam} \
            -O {output.vcf} \
            2> {log}
        """

# Rule to filter variants with GATK VariantFiltration
rule filter_variants:
    input:
        vcf = "results/variants/{sample}.vcf.gz",
        ref = REFERENCE
    output:
        vcf = "results/filtered/{sample}.filtered.vcf.gz",
        idx = "results/filtered/{sample}.filtered.vcf.gz.tbi"
    log:
        "logs/filter_variants/{sample}.log"
    params:
        filters = config["params"]["variant_filtering"]["filters"],
        java_opts = "-Xmx2g"
    shell:
        """
        gatk --java-options "{params.java_opts}" VariantFiltration \
            -R {input.ref} \
            -V {input.vcf} \
            {params.filters} \
            -O {output.vcf} \
            2> {log}
        """

# Rule to create reference dictionary
rule create_dict:
    input:
        ref = REFERENCE
    output:
        dict = f"{os.path.splitext(REFERENCE)[0]}.dict"
    log:
        "logs/create_dict/reference.log"
    shell:
        """
        samtools dict {input.ref} -o {output.dict} 2> {log}
        """

# Rule to index reference fasta
rule samtools_faidx:
    input:
        ref = REFERENCE
    output:
        fai = f"{REFERENCE}.fai"
    log:
        "logs/samtools_faidx/reference.log"
    shell:
        """
        samtools faidx {input.ref} 2> {log}
        """

# Rule to generate MultiQC report
rule multiqc:
    input:
        fastqc_zip = expand(["results/fastqc/{sample}_R1_fastqc.zip", "results/fastqc/{sample}_R2_fastqc.zip"], sample=SAMPLES),
        dedup_metrics = expand("results/dedup/{sample}.metrics.txt", sample=SAMPLES)
    output:
        "results/qc/multiqc_report.html"
    log:
        "logs/multiqc/multiqc.log"
    params:
        outdir = "results/qc"
    shell:
        """
        multiqc -f -o {params.outdir} results/ 2> {log}
        """