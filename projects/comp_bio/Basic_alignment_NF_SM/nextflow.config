/*
 * Nextflow configuration file for Genomic Alignment Pipeline
 */

// Default parameters
params {
    // Input/output options
    reads = "$baseDir/data/*_{1,2}.fastq.gz"
    genome = "$baseDir/reference/reference.fasta"
    outdir = "$baseDir/results"
    
    // Resource allocation
    threads = 8
    memory = 16.GB
    
    // Tool-specific parameters
    adapter = "$baseDir/adapter/TruSeq3-PE.fa"
    
    // AWS S3 parameters (uncomment if using AWS)
    // aws_region = "us-east-1"
    // aws_profile = "default"
}

// Process-specific configuration
process {
    // Default configuration for all processes
    executor = 'local'
    cpus = { params.threads }
    memory = { params.memory }
    
    // Resource configuration for specific processes
    withName: 'fastqc' {
        cpus = 2
        memory = 4.GB
    }
    
    withName: 'trimmomatic' {
        cpus = { params.threads }
        memory = 8.GB
    }
    
    withName: 'bwa_align' {
        cpus = { params.threads }
        memory = { params.memory }
    }
    
    withName: 'mark_duplicates' {
        cpus = 4
        memory = 16.GB
    }
    
    withName: 'bqsr' {
        cpus = 4
        memory = 16.GB
    }
    
    withName: 'call_variants' {
        cpus = 4
        memory = 16.GB
    }
    
    withName: 'filter_variants' {
        cpus = 2
        memory = 4.GB
    }
}

// Execution profiles
profiles {
    // Local execution profile
    standard {
        process.executor = 'local'
    }
    
    // SGE cluster profile
    sge {
        process.executor = 'sge'
        process.queue = 'all.q'
        process.clusterOptions = '-S /bin/bash'
    }
    
    // SLURM cluster profile
    slurm {
        process.executor = 'slurm'
        process.queue = 'normal'
        process.clusterOptions = '--account=myproject'
    }
    
    // AWS Batch profile
    awsbatch {
        process.executor = 'awsbatch'
        process.queue = 'genomics-queue'
        aws.region = params.aws_region
        aws.batch.cliPath = '/home/ec2-user/miniconda/bin/aws'
    }
    
    // Google Cloud profile
    gcp {
        workDir = 'gs://my-bucket/work'
        process.executor = 'google-lifesciences'
        google.project = 'my-project-id'
        google.region = 'us-central1'
        google.lifeSciences.bootDiskSize = 50.GB
    }
    
    // Docker profile
    docker {
        docker.enabled = true
        process.container = 'genomics-pipeline:latest'
    }
    
    // Singularity profile
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        process.container = 'docker://genomics-pipeline:latest'
    }
}

// Docker configuration
docker {
    enabled = false
    runOptions = '-u $(id -u):$(id -g)'
}

// Singularity configuration
singularity {
    enabled = false
    autoMounts = true
    runOptions = ''
}

// Report configuration
report {
    enabled = true
    file = "${params.outdir}/reports/execution_report.html"
}

// Timeline configuration
timeline {
    enabled = true
    file = "${params.outdir}/reports/execution_timeline.html"
}

// Trace configuration
trace {
    enabled = true
    file = "${params.outdir}/reports/execution_trace.txt"
    fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes'
}

// Dag configuration
dag {
    enabled = true
    file = "${params.outdir}/reports/pipeline_dag.svg"
}

// Manifest
manifest {
    name = 'Genomic Alignment Pipeline'
    author = 'Your Name'
    homePage = 'https://github.com/yourusername/genomic-alignment-pipeline'
    description = 'Nextflow pipeline for genomic alignment and variant calling'
    mainScript = 'main.nf'
    version = '1.0.0'
}